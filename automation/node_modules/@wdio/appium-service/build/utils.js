"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isWindows = exports.sanitizeCliOptionValue = exports.formatCliArgs = exports.getFilePath = void 0;
const path_1 = require("path");
const param_case_1 = require("param-case");
const FILE_EXTENSION_REGEX = /\.[0-9a-z]+$/i;
/**
 * Resolves the given path into a absolute path and appends the default filename as fallback when the provided path is a directory.
 * @param  {String} filePath         relative file or directory path
 * @param  {String} defaultFilename default file name when filePath is a directory
 * @return {String}                 absolute file path
 */
function getFilePath(filePath, defaultFilename) {
    let absolutePath = (0, path_1.resolve)(filePath);
    // test if we already have a file (e.g. selenium.txt, .log, log.txt, etc.)
    // NOTE: path.extname doesn't work to detect a file, cause dotfiles are reported by node to have no extension
    if (!FILE_EXTENSION_REGEX.test((0, path_1.basename)(absolutePath))) {
        absolutePath = (0, path_1.join)(absolutePath, defaultFilename);
    }
    return absolutePath;
}
exports.getFilePath = getFilePath;
function formatCliArgs(args) {
    if (Array.isArray(args)) {
        return args.map(arg => sanitizeCliOptionValue(arg));
    }
    const cliArgs = [];
    for (const key in args) {
        let value = args[key];
        // If the value is false or null the argument is discarded
        if ((typeof value === 'boolean' && !value) || value === null) {
            continue;
        }
        cliArgs.push(`--${(0, param_case_1.paramCase)(key)}`);
        // Only non-boolean and non-null values are added as option values
        if (typeof value !== 'boolean') {
            cliArgs.push(sanitizeCliOptionValue(value));
        }
    }
    return cliArgs;
}
exports.formatCliArgs = formatCliArgs;
function sanitizeCliOptionValue(value) {
    const valueString = String(value);
    // Encapsulate the value string in single quotes if it contains a white space
    return /\s/.test(valueString) ? `'${valueString}'` : valueString;
}
exports.sanitizeCliOptionValue = sanitizeCliOptionValue;
function isWindows() {
    return process.platform === 'win32';
}
exports.isWindows = isWindows;
